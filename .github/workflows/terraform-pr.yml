name: Terraform (bootstrap + prod)

on:
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/**"   # שינוי בקובץ ה־workflow יטריג ריצה
      - "bootstrap/**"
      - "prod/**"
      - "modules/**"
  pull_request:
    branches: [ "main" ]
    paths:
      - "prod/**"
      - "modules/**"
  workflow_dispatch:
    inputs:
      target:
        description: "Which part to run? (bootstrap/prod/both)"
        required: false
        default: "both"
      bootstrap_apply:
        description: "Run terraform apply for bootstrap? (true/false)"
        required: false
        default: "false"
      prod_apply:
        description: "Run terraform apply for prod? (true/false)"
        required: false
        default: "false"

jobs:
  detect:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      bootstrap: ${{ steps.filter.outputs.bootstrap }}
      prod:      ${{ steps.filter.outputs.prod }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            bootstrap:
              - 'bootstrap/**'
            prod:
              - 'prod/**'
              - 'modules/**'

  bootstrap:
    name: Bootstrap (S3 + DynamoDB)
    needs: detect
    if: |
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.target == 'bootstrap' || github.event.inputs.target == 'both'))
      || (github.event_name != 'workflow_dispatch' && needs.detect.outputs.bootstrap == 'true')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      # bootstrap עובד עם state מקומי (אין backend "s3" בקוד)
      - name: Terraform Init (local state)
        run: terraform init -upgrade
        working-directory: bootstrap

      - name: Terraform Fmt & Validate
        run: |
          terraform fmt -check
          terraform validate
        working-directory: bootstrap

      - name: Terraform Plan
        run: |
          terraform plan -input=false -out=tfplan \
            -var="region=${{ secrets.AWS_REGION }}" \
            -var="bucket_name=${{ vars.TFSTATE_BUCKET }}" \
            -var="dynamodb_table=${{ vars.TF_LOCKS_TABLE }}"
        working-directory: bootstrap

      - name: Terraform Apply (manual only)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.bootstrap_apply == 'true'
        run: terraform apply -auto-approve tfplan
        working-directory: bootstrap

  prod:
    name: Prod (module deploy)
    needs: detect
    if: |
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.target == 'prod' || github.event.inputs.target == 'both'))
      || (github.event_name != 'workflow_dispatch' && needs.detect.outputs.prod == 'true')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      # prod משתמש ב-backend S3 שנוצר ב-bootstrap
      - name: Terraform Init (remote backend)
        run: |
          terraform init \
            -backend-config="bucket=${{ vars.TFSTATE_BUCKET }}" \
            -backend-config="key=prod/infra.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ vars.TF_LOCKS_TABLE }}" \
            -upgrade
        working-directory: prod

      - name: Terraform Fmt & Validate
        run: |
          terraform fmt -check
          terraform validate
        working-directory: prod

      - name: Terraform Plan
        run: |
          terraform plan -input=false -out=tfplan \
            -var="region=${{ secrets.AWS_REGION }}"
        working-directory: prod

      - name: Terraform Apply (prod)
        if: |
          (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.prod_apply == 'true')
        run: terraform apply -auto-approve tfplan
        working-directory: prod
